From 343cd78c868de53024bbe668b959fdeb1998ee0c Mon Sep 17 00:00:00 2001
From: andrew <1297077+andrewmd5@users.noreply.github.com>
Date: Tue, 24 Jun 2025 15:23:01 +0900
Subject: [PATCH] optimized js_parse_class_default_ctor()

---
 .../quickjs/include/quickjs-opcode.h          |   1 +
 src/interpreter/quickjs/source/quickjs.cc     | 103 +++++++++++++-----
 2 files changed, 79 insertions(+), 25 deletions(-)

diff --git a/src/interpreter/quickjs/include/quickjs-opcode.h b/src/interpreter/quickjs/include/quickjs-opcode.h
index 871b32a..7044370 100644
--- a/src/interpreter/quickjs/include/quickjs-opcode.h
+++ b/src/interpreter/quickjs/include/quickjs-opcode.h
@@ -118,6 +118,7 @@ DEF(return, 1, 1, 0, none)
 DEF(return_undef, 1, 0, 0, none)
 DEF(check_ctor_return, 1, 1, 2, none)
 DEF(check_ctor, 1, 0, 0, none)
+DEF(init_ctor, 1, 0, 1, none)
 DEF(check_brand, 1, 2, 2, none) /* this_obj func -> this_obj func */
 DEF(add_brand, 1, 2, 0, none)   /* this_obj home_obj -> */
 DEF(return_async, 1, 1, 0, none)
diff --git a/src/interpreter/quickjs/source/quickjs.cc b/src/interpreter/quickjs/source/quickjs.cc
index b2d89b5..932d120 100644
--- a/src/interpreter/quickjs/source/quickjs.cc
+++ b/src/interpreter/quickjs/source/quickjs.cc
@@ -17035,11 +17035,28 @@ restart:
       sp++;
       BREAK;
       CASE(OP_check_ctor) : if (LEPUS_IsUndefined(new_target)) {
+      non_ctor_call:
         LEPUS_ThrowTypeError(caller_ctx,
                              "class constructors must be invoked with 'new'");
         goto exception;
       }
       BREAK;
+      CASE(OP_init_ctor):
+      {
+        LEPUSValue super, ret;
+        sf->cur_pc = pc;
+        if (LEPUS_IsUndefined(new_target))
+          goto non_ctor_call;
+        super = LEPUS_GetPrototype(ctx, func_obj);
+        if (LEPUS_IsException(super))
+          goto exception;
+        ret = LEPUS_CallConstructor2(ctx, super, new_target, argc, (LEPUSValueConst *)argv);
+        LEPUS_FreeValue(ctx, super);
+        if (LEPUS_IsException(ret))
+          goto exception;
+        *sp++ = ret;
+      }
+      BREAK;
       CASE(OP_check_brand)
           : if (JS_CheckBrand(ctx, sp[-2], sp[-1]) < 0) goto exception;
       BREAK;
@@ -22420,41 +22437,77 @@ void optional_chain_test(JSParseState *s, int *poptional_chaining_label,
 QJS_STATIC __exception int js_parse_postfix_expr(JSParseState *s,
                                                  int parse_flags);
 
+QJS_STATIC void emit_class_field_init(JSParseState *s);
+
+QJS_STATIC JSFunctionDef *js_new_function_def(LEPUSContext *ctx,
+                                          JSFunctionDef *parent,
+                                          BOOL is_eval,
+                                          BOOL is_func_expr,
+                                          const char *filename, int line_num);
+
+void emit_return(JSParseState *s, BOOL hasval);
+
 QJS_STATIC __exception int js_parse_left_hand_side_expr(JSParseState *s) {
   return js_parse_postfix_expr(s, PF_POSTFIX_CALL);
 }
 
-/* XXX: is there is nicer solution ? */
+
 __exception int js_parse_class_default_ctor(JSParseState *s, BOOL has_super,
-                                            JSFunctionDef **pfd) {
-  JSParsePos pos;
-  const char *str;
-  int ret, line_num;
+                                            JSFunctionDef **pfd)
+{
   JSParseFunctionEnum func_type;
-  const uint8_t *saved_buf_end;
+  JSFunctionDef *fd = s->cur_func;
+  int idx;
 
-  js_parse_get_pos(s, &pos);
-  if (has_super) {
-    /* spec change: no argument evaluation */
-    str = "(){super(...arguments);}";
+  fd = js_new_function_def(s->ctx, fd, FALSE, FALSE, s->filename,
+                           s->token.line_num);
+  if (!fd)
+    return -1;
+
+  s->cur_func = fd;
+  fd->has_home_object = TRUE;
+  fd->super_allowed = TRUE;
+  fd->has_prototype = FALSE;
+  fd->has_this_binding = TRUE;
+  fd->new_target_allowed = TRUE;
+
+  push_scope(s); /* enter body scope */
+  fd->body_scope = fd->scope_level;
+  if (has_super)
+  {
+    fd->is_derived_class_constructor = TRUE;
+    fd->super_call_allowed = TRUE;
+    fd->arguments_allowed = TRUE;
+    fd->has_arguments_binding = TRUE;
     func_type = JS_PARSE_FUNC_DERIVED_CLASS_CONSTRUCTOR;
-  } else {
-    str = "(){}";
-    func_type = JS_PARSE_FUNC_CLASS_CONSTRUCTOR;
+    emit_op(s, OP_init_ctor);
+    // TODO(bnoordhuis) roll into OP_init_ctor
+    emit_op(s, OP_scope_put_var_init);
+    emit_atom(s, JS_ATOM_this);
+    emit_u16(s, 0);
+    emit_class_field_init(s);
   }
-  line_num = s->token.line_num;
-  saved_buf_end = s->buf_end;
-  s->buf_ptr = (uint8_t *)str;
-  s->buf_end = (uint8_t *)(str + strlen(str));
-  ret = next_token(s);
-  if (!ret) {
-    ret = js_parse_function_decl2(s, func_type, JS_FUNC_NORMAL, JS_ATOM_NULL,
-                                  (uint8_t *)str, line_num,
-                                  JS_PARSE_EXPORT_NONE, pfd);
+  else
+  {
+    func_type = JS_PARSE_FUNC_CLASS_CONSTRUCTOR;
+    /* error if not invoked as a constructor */
+    emit_op(s, OP_check_ctor);
+    emit_class_field_init(s);
   }
-  s->buf_end = saved_buf_end;
-  ret |= js_parse_seek_token(s, &pos);
-  return ret;
+
+  fd->func_kind = JS_FUNC_NORMAL;
+  fd->func_type = func_type;
+  emit_return(s, FALSE);
+
+  s->cur_func = fd->parent;
+  if (pfd)
+    *pfd = fd;
+
+  /* the real object will be set at the end of the compilation */
+  idx = cpool_add(s, LEPUS_NULL);
+  fd->parent_cpool_idx = idx;
+
+  return 0;
 }
 
 /* find field in the current scope */
-- 
2.48.1

