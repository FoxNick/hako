From 11b99bae5320350272e3b9d7c23c0c2f6117e6b4 Mon Sep 17 00:00:00 2001
From: andrew <1297077+andrewmd5@users.noreply.github.com>
Date: Tue, 24 Jun 2025 18:51:36 +0900
Subject: [PATCH] fixed Array.from() and TypedArray.from()

---
 src/interpreter/quickjs/source/quickjs.cc | 210 +++++++++++++---------
 1 file changed, 124 insertions(+), 86 deletions(-)

diff --git a/src/interpreter/quickjs/source/quickjs.cc b/src/interpreter/quickjs/source/quickjs.cc
index 4e6624b..4d919fe 100644
--- a/src/interpreter/quickjs/source/quickjs.cc
+++ b/src/interpreter/quickjs/source/quickjs.cc
@@ -3098,6 +3098,8 @@ BOOL JS_AtomIsArrayIndex(LEPUSContext *ctx, uint32_t *pval, JSAtom atom) {
   }
 }
 
+QJS_STATIC int string_get(const JSString *p, int idx);
+
 /* This test must be fast if atom is not a numeric index (e.g. a
    method name). Return LEPUS_UNDEFINED if not a numeric
    index. LEPUS_EXCEPTION can also be returned. */
@@ -37757,105 +37759,131 @@ fail:
 }
 
 QJS_STATIC LEPUSValue js_array_from(LEPUSContext *ctx, LEPUSValueConst this_val,
-                                    int argc, LEPUSValueConst *argv) {
+                                    int argc, LEPUSValueConst *argv)
+{
   // from(items, mapfn = void 0, this_arg = void 0)
   LEPUSValueConst items = argv[0], mapfn, this_arg;
   LEPUSValueConst args[2];
-  LEPUSValue stack[2];
-  LEPUSValue iter, r, v, v2, arrayLike;
+  LEPUSValue iter, r, v, v2, arrayLike, next_method, enum_obj;
   int64_t k, len;
   int done, mapping;
-
   mapping = FALSE;
   mapfn = LEPUS_UNDEFINED;
   this_arg = LEPUS_UNDEFINED;
   r = LEPUS_UNDEFINED;
   arrayLike = LEPUS_UNDEFINED;
-  stack[0] = LEPUS_UNDEFINED;
-  stack[1] = LEPUS_UNDEFINED;
-
-  if (argc > 1) {
+  iter = LEPUS_UNDEFINED;
+  enum_obj = LEPUS_UNDEFINED;
+  next_method = LEPUS_UNDEFINED;
+  if (argc > 1)
+  {
     mapfn = argv[1];
-    if (!LEPUS_IsUndefined(mapfn)) {
-      if (check_function(ctx, mapfn)) goto exception;
+    if (!LEPUS_IsUndefined(mapfn))
+    {
+      if (check_function(ctx, mapfn))
+        goto exception;
       mapping = 1;
-      if (argc > 2) this_arg = argv[2];
+      if (argc > 2)
+        this_arg = argv[2];
     }
   }
-  // <Primjs begin>
-  items = JSRef2Value(ctx, items);
-  // <Primjs end>
-  iter =
-      JS_GetPropertyInternal_RC(ctx, items, JS_ATOM_Symbol_iterator, items, 0);
-  if (LEPUS_IsException(iter)) goto exception;
-  if (!LEPUS_IsUndefined(iter)) {
-    LEPUS_FreeValue(ctx, iter);
+  iter = LEPUS_GetProperty(ctx, items, JS_ATOM_Symbol_iterator);
+  if (LEPUS_IsException(iter))
+    goto exception;
+  if (!LEPUS_IsUndefined(iter) && !LEPUS_IsNull(iter))
+  {
+    if (!LEPUS_IsFunction(ctx, iter))
+    {
+      LEPUS_ThrowTypeError(ctx, "value is not iterable");
+      goto exception;
+    }
     if (LEPUS_IsConstructor(ctx, this_val))
       r = LEPUS_CallConstructor(ctx, this_val, 0, NULL);
     else
       r = LEPUS_NewArray(ctx);
-    if (LEPUS_IsException(r)) goto exception;
-    stack[0] = LEPUS_DupValue(ctx, items);
-    if (js_for_of_start(ctx, &stack[1], FALSE)) goto exception;
-    for (k = 0;; k++) {
-      v = JS_IteratorNext(ctx, stack[0], stack[1], 0, NULL, &done);
-      if (LEPUS_IsException(v)) goto exception_close;
-      if (done) break;
-      if (mapping) {
+    if (LEPUS_IsException(r))
+      goto exception;
+    enum_obj = JS_GetIterator2(ctx, items, iter);
+    if (LEPUS_IsException(enum_obj))
+      goto exception;
+    next_method = LEPUS_GetProperty(ctx, enum_obj, JS_ATOM_next);
+    if (LEPUS_IsException(next_method))
+      goto exception;
+    for (k = 0;; k++)
+    {
+      v = JS_IteratorNext(ctx, enum_obj, next_method, 0, NULL, &done);
+      if (LEPUS_IsException(v))
+        goto exception;
+      if (done)
+        break;
+      if (mapping)
+      {
         args[0] = v;
         args[1] = LEPUS_NewInt32(ctx, k);
         v2 = JS_Call_RC(ctx, mapfn, this_arg, 2, args);
         LEPUS_FreeValue(ctx, v);
         v = v2;
-        if (LEPUS_IsException(v)) goto exception_close;
+        if (LEPUS_IsException(v))
+          goto exception_close;
       }
       if (JS_DefinePropertyValueInt64(ctx, r, k, v,
                                       LEPUS_PROP_C_W_E | LEPUS_PROP_THROW) < 0)
         goto exception_close;
     }
-  } else {
+  }
+  else
+  {
     arrayLike = LEPUS_ToObject(ctx, items);
-    if (LEPUS_IsException(arrayLike)) goto exception;
-    if (js_get_length64(ctx, &len, arrayLike) < 0) goto exception;
+    if (LEPUS_IsException(arrayLike))
+      goto exception;
+    if (js_get_length64(ctx, &len, arrayLike) < 0)
+      goto exception;
     v = LEPUS_NewInt64(ctx, len);
     args[0] = v;
-    if (LEPUS_IsConstructor(ctx, this_val)) {
+    if (LEPUS_IsConstructor(ctx, this_val))
+    {
       r = LEPUS_CallConstructor(ctx, this_val, 1, args);
-    } else {
+    }
+    else
+    {
       r = js_array_constructor(ctx, LEPUS_UNDEFINED, 1, args);
     }
     LEPUS_FreeValue(ctx, v);
-    if (LEPUS_IsException(r)) goto exception;
-    for (k = 0; k < len; k++) {
+    if (LEPUS_IsException(r))
+      goto exception;
+    for (k = 0; k < len; k++)
+    {
       v = JS_GetPropertyInt64(ctx, arrayLike, k);
-      if (LEPUS_IsException(v)) goto exception;
-      if (mapping) {
+      if (LEPUS_IsException(v))
+        goto exception;
+      if (mapping)
+      {
         args[0] = v;
         args[1] = LEPUS_NewInt32(ctx, k);
         v2 = JS_Call_RC(ctx, mapfn, this_arg, 2, args);
         LEPUS_FreeValue(ctx, v);
         v = v2;
-        if (LEPUS_IsException(v)) goto exception;
+        if (LEPUS_IsException(v))
+          goto exception;
       }
       if (JS_DefinePropertyValueInt64(ctx, r, k, v,
                                       LEPUS_PROP_C_W_E | LEPUS_PROP_THROW) < 0)
         goto exception;
     }
   }
-  if (JS_SetPropertyInternal_RC(ctx, r, JS_ATOM_length, JS_NewUint32(ctx, k),
-                                LEPUS_PROP_THROW) < 0)
+  if (LEPUS_SetProperty(ctx, r, JS_ATOM_length, JS_NewUint32(ctx, k)) < 0)
     goto exception;
   goto done;
-
 exception_close:
-  if (!LEPUS_IsUndefined(stack[0])) JS_IteratorClose(ctx, stack[0], TRUE);
+  JS_IteratorClose(ctx, enum_obj, TRUE);
 exception:
   LEPUS_FreeValue(ctx, r);
   r = LEPUS_EXCEPTION;
 done:
   LEPUS_FreeValue(ctx, arrayLike);
-  LEPUS_FreeValue(ctx, stack[0]);
-  LEPUS_FreeValue(ctx, stack[1]);
+  LEPUS_FreeValue(ctx, iter);
+  LEPUS_FreeValue(ctx, enum_obj);
+  LEPUS_FreeValue(ctx, next_method);
   return r;
 }
 
@@ -53987,84 +54015,94 @@ QJS_STATIC LEPUSValue js_typed_array___speciesCreate(LEPUSContext *ctx,
   return ret;
 }
 
-QJS_STATIC LEPUSValue js_typed_array_from(LEPUSContext *ctx,
-                                          LEPUSValueConst this_val, int argc,
-                                          LEPUSValueConst *argv) {
+QJS_STATIC LEPUSValue js_array_from_iterator(LEPUSContext *ctx, uint32_t *plen,
+  LEPUSValueConst obj,
+  LEPUSValueConst method);
+
+static LEPUSValue js_typed_array_from(LEPUSContext *ctx, LEPUSValueConst this_val,
+                                      int argc, LEPUSValueConst *argv)
+{
   // from(items, mapfn = void 0, this_arg = void 0)
   LEPUSValueConst items = argv[0], mapfn, this_arg;
   LEPUSValueConst args[2];
-  LEPUSValue stack[2];
   LEPUSValue iter, arr, r, v, v2;
   int64_t k, len;
-  int done, mapping;
+  int mapping;
 
   mapping = FALSE;
   mapfn = LEPUS_UNDEFINED;
   this_arg = LEPUS_UNDEFINED;
   r = LEPUS_UNDEFINED;
   arr = LEPUS_UNDEFINED;
-  stack[0] = LEPUS_UNDEFINED;
-  stack[1] = LEPUS_UNDEFINED;
+  iter = LEPUS_UNDEFINED;
 
-  if (argc > 1) {
+  if (argc > 1)
+  {
     mapfn = argv[1];
-    if (!LEPUS_IsUndefined(mapfn)) {
-      if (check_function(ctx, mapfn)) goto exception;
+    if (!LEPUS_IsUndefined(mapfn))
+    {
+      if (check_function(ctx, mapfn))
+        goto exception;
       mapping = 1;
-      if (argc > 2) this_arg = argv[2];
+      if (argc > 2)
+        this_arg = argv[2];
     }
   }
-  iter =
-      JS_GetPropertyInternal_RC(ctx, items, JS_ATOM_Symbol_iterator, items, 0);
-  if (LEPUS_IsException(iter)) goto exception;
-  if (!LEPUS_IsUndefined(iter)) {
-    LEPUS_FreeValue(ctx, iter);
-    arr = LEPUS_NewArray(ctx);
-    if (LEPUS_IsException(arr)) goto exception;
-    stack[0] = LEPUS_DupValue(ctx, items);
-    if (js_for_of_start(ctx, &stack[1], FALSE)) goto exception;
-    for (k = 0;; k++) {
-      v = JS_IteratorNext(ctx, stack[0], stack[1], 0, NULL, &done);
-      if (LEPUS_IsException(v)) goto exception_close;
-      if (done) break;
-      if (JS_DefinePropertyValueInt64(ctx, arr, k, v,
-                                      LEPUS_PROP_C_W_E | LEPUS_PROP_THROW) < 0)
-        goto exception_close;
+  iter = LEPUS_GetProperty(ctx, items, JS_ATOM_Symbol_iterator);
+  if (LEPUS_IsException(iter))
+    goto exception;
+  if (!LEPUS_IsUndefined(iter) && !LEPUS_IsNull(iter))
+  {
+    uint32_t len1;
+    if (!LEPUS_IsFunction(ctx, iter))
+    {
+      LEPUS_ThrowTypeError(ctx, "value is not iterable");
+      goto exception;
     }
-  } else {
+    arr = js_array_from_iterator(ctx, &len1, items, iter);
+    if (LEPUS_IsException(arr))
+      goto exception;
+    len = len1;
+  }
+  else
+  {
     arr = LEPUS_ToObject(ctx, items);
-    if (LEPUS_IsException(arr)) goto exception;
+    if (LEPUS_IsException(arr))
+      goto exception;
+    if (js_get_length64(ctx, &len, arr) < 0)
+      goto exception;
   }
-  if (js_get_length64(ctx, &len, arr) < 0) goto exception;
   v = LEPUS_NewInt64(ctx, len);
   args[0] = v;
   r = js_typed_array_create(ctx, this_val, 1, args);
   LEPUS_FreeValue(ctx, v);
-  if (LEPUS_IsException(r)) goto exception;
-  for (k = 0; k < len; k++) {
+  if (LEPUS_IsException(r))
+    goto exception;
+  for (k = 0; k < len; k++)
+  {
     v = JS_GetPropertyInt64(ctx, arr, k);
-    if (LEPUS_IsException(v)) goto exception;
-    if (mapping) {
+    if (LEPUS_IsException(v))
+      goto exception;
+    if (mapping)
+    {
       args[0] = v;
       args[1] = LEPUS_NewInt32(ctx, k);
-      v2 = JS_Call_RC(ctx, mapfn, this_arg, 2, args);
+      v2 = LEPUS_Call(ctx, mapfn, this_arg, 2, args);
       LEPUS_FreeValue(ctx, v);
       v = v2;
-      if (LEPUS_IsException(v)) goto exception;
+      if (LEPUS_IsException(v))
+        goto exception;
     }
-    if (LEPUS_SetPropertyInt64(ctx, r, k, v) < 0) goto exception;
+    if (LEPUS_SetPropertyInt64(ctx, r, k, v) < 0)
+      goto exception;
   }
   goto done;
-
-exception_close:
-  if (!LEPUS_IsUndefined(stack[0])) JS_IteratorClose(ctx, stack[0], TRUE);
 exception:
   LEPUS_FreeValue(ctx, r);
   r = LEPUS_EXCEPTION;
 done:
   LEPUS_FreeValue(ctx, arr);
-  LEPUS_FreeValue(ctx, stack[0]);
-  LEPUS_FreeValue(ctx, stack[1]);
+  LEPUS_FreeValue(ctx, iter);
   return r;
 }
 
-- 
2.48.1

