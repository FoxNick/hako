From bf15455cd89d381d8fb7efbfaa94a10de1769e5e Mon Sep 17 00:00:00 2001
From: andrew <1297077+andrewmd5@users.noreply.github.com>
Date: Mon, 7 Apr 2025 17:54:49 +0900
Subject: [PATCH] fix wrong line number in stacktrace

---
 .../quickjs/include/quickjs-inner.h           |  1 +
 src/interpreter/quickjs/source/quickjs.cc     | 28 +++++++++++--------
 src/interpreter/quickjs/source/quickjs_gc.cc  |  5 ++++
 3 files changed, 22 insertions(+), 12 deletions(-)

diff --git a/src/interpreter/quickjs/include/quickjs-inner.h b/src/interpreter/quickjs/include/quickjs-inner.h
index 01491a1..0cdce40 100644
--- a/src/interpreter/quickjs/include/quickjs-inner.h
+++ b/src/interpreter/quickjs/include/quickjs-inner.h
@@ -2349,6 +2349,7 @@ QJS_HIDE int js_parse_string(JSParseState *s, int sep, BOOL do_throw,
 QJS_HIDE int cpool_add(JSParseState *s, LEPUSValue val);
 QJS_HIDE int emit_push_const(JSParseState *s, LEPUSValueConst val,
                              BOOL as_atom);
+QJS_HIDE void emit_line_num(JSParseState *s, bool is_get_var);
 QJS_HIDE void emit_op(JSParseState *s, uint8_t val);
 QJS_HIDE int emit_label(JSParseState *s, int label);
 QJS_HIDE void emit_return(JSParseState *s, BOOL hasval);
diff --git a/src/interpreter/quickjs/source/quickjs.cc b/src/interpreter/quickjs/source/quickjs.cc
index 6b2e02d..14a70c8 100644
--- a/src/interpreter/quickjs/source/quickjs.cc
+++ b/src/interpreter/quickjs/source/quickjs.cc
@@ -20887,22 +20887,20 @@ QJS_STATIC void emit_u32(JSParseState *s, uint32_t val) {
   dbuf_put_u32(&s->cur_func->byte_code, val);
 }
 
+void emit_line_num(JSParseState *s, bool is_get_var)
+{
+  JSFunctionDef *fd = s->cur_func;
+  DynBuf *bc = &fd->byte_code;
+
+  int64_t result = compute_column(s, is_get_var); // val == OP_scope_get_var
+  dbuf_putc(bc, OP_line_num);
+  dbuf_put_u64(bc, result);
+}
+
 void emit_op(JSParseState *s, uint8_t val) {
   JSFunctionDef *fd = s->cur_func;
   DynBuf *bc = &fd->byte_code;
 
-  /* Use the line number of the last token used, not the next token,
-     nor the current offset in the source file.
-   */
-  // <Primjs begin>
-  if (unlikely(s->last_emit_ptr != s->last_ptr)) {
-    int64_t result = compute_column(s, val == OP_scope_get_var);
-    dbuf_putc(bc, OP_line_num);
-    dbuf_put_u64(bc, result);
-    s->last_emit_ptr = s->last_ptr;
-    fd->last_opcode_line_num = s->last_line_num;
-  }
-  // <Primjs end>
   fd->last_opcode_pos = bc->size;
   dbuf_putc(bc, val);
 }
@@ -23736,6 +23734,7 @@ QJS_STATIC __exception int js_parse_postfix_expr(JSParseState *s,
         if (next_token(s)) /* update line number before emitting code */
           return -1;
       do_get_var:
+        emit_line_num(s, true);
         emit_op(s, OP_scope_get_var);
         emit_u32(s, name);
         emit_u16(s, s->cur_func->scope_level);
@@ -23769,6 +23768,7 @@ QJS_STATIC __exception int js_parse_postfix_expr(JSParseState *s,
         emit_atom(s, JS_ATOM_new_target);
         emit_u16(s, 0);
       } else {
+        emit_line_num(s, false);
         caller_start = s->token.ptr;
         if (js_parse_postfix_expr(s, FALSE | PF_LASTEST_ISNEW)) return -1;
         is_parsing_newnew_pattern = parse_flags & PF_LASTEST_ISNEW;
@@ -23866,6 +23866,7 @@ QJS_STATIC __exception int js_parse_postfix_expr(JSParseState *s,
 
       if (call_type == FUNC_CALL_NORMAL) {
       parse_func_call2:
+        emit_line_num(s, false);
         switch (opcode = get_prev_opcode(fd)) {
           case OP_get_field:
             /* keep the object on the stack */
@@ -24504,6 +24505,7 @@ QJS_STATIC __exception int js_parse_expr_binary(JSParseState *s, int level,
         abort();
     }
     if (next_token(s)) return -1;
+    emit_line_num(s, false);
     if (js_parse_expr_binary(s, level - 1, parse_flags & ~PF_ARROW_FUNC))
       return -1;
     emit_op(s, opcode);
@@ -25420,6 +25422,7 @@ QJS_STATIC __exception int js_parse_statement_or_decl(JSParseState *s,
         js_parse_error(s, "line terminator not allowed after throw");
         goto fail;
       }
+      emit_line_num(s, false);
       if (js_parse_expr(s)) goto fail;
       emit_op(s, OP_throw);
       if (js_parse_expect_semi(s)) goto fail;
@@ -25993,6 +25996,7 @@ QJS_STATIC __exception int js_parse_statement_or_decl(JSParseState *s,
 
     default:
     hasexpr:
+      emit_line_num(s, false);
       if (js_parse_expr(s)) goto fail;
       if (s->cur_func->eval_ret_idx >= 0) {
         /* store the expression value so that it can be returned
diff --git a/src/interpreter/quickjs/source/quickjs_gc.cc b/src/interpreter/quickjs/source/quickjs_gc.cc
index b8af1ef..8d29c21 100644
--- a/src/interpreter/quickjs/source/quickjs_gc.cc
+++ b/src/interpreter/quickjs/source/quickjs_gc.cc
@@ -12504,6 +12504,7 @@ static __exception int js_parse_postfix_expr(JSParseState *s, int parse_flags) {
         if (next_token(s)) /* update line number before emitting code */
           return -1;
       do_get_var:
+        emit_line_num(s, true);
         emit_op(s, OP_scope_get_var);
         emit_u32(s, name);
         emit_u16(s, s->cur_func->scope_level);
@@ -12537,6 +12538,7 @@ static __exception int js_parse_postfix_expr(JSParseState *s, int parse_flags) {
         emit_atom(s, JS_ATOM_new_target);
         emit_u16(s, 0);
       } else {
+        emit_line_num(s, false);
         caller_start = s->token.ptr;
         if (js_parse_postfix_expr(s, FALSE | PF_LASTEST_ISNEW)) return -1;
         caller_end = s->token.ptr;
@@ -12635,6 +12637,7 @@ static __exception int js_parse_postfix_expr(JSParseState *s, int parse_flags) {
 
       if (call_type == FUNC_CALL_NORMAL) {
       parse_func_call2:
+        emit_line_num(s, false);
         switch (opcode = get_prev_opcode(fd)) {
           case OP_get_field:
             /* keep the object on the stack */
@@ -13492,6 +13495,7 @@ static __exception int js_parse_statement_or_decl(JSParseState *s,
         js_parse_error(s, "line terminator not allowed after throw");
         goto fail;
       }
+      emit_line_num(s, false);
       if (js_parse_expr(s)) goto fail;
       emit_op(s, OP_throw);
       if (js_parse_expect_semi(s)) goto fail;
@@ -14067,6 +14071,7 @@ static __exception int js_parse_statement_or_decl(JSParseState *s,
 
     default:
     hasexpr:
+      emit_line_num(s, false);
       if (js_parse_expr(s)) goto fail;
       if (s->cur_func->eval_ret_idx >= 0) {
         /* store the expression value so that it can be returned
-- 
2.39.5 (Apple Git-154)

