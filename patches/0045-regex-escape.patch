From 72ccf319fe2eefac0784c7ec271244db218c5d13 Mon Sep 17 00:00:00 2001
From: andrew <1297077+andrewmd5@users.noreply.github.com>
Date: Tue, 24 Jun 2025 16:08:53 +0900
Subject: [PATCH] added RegExp.escape

---
 src/interpreter/quickjs/include/cutils.h  |  5 ++
 src/interpreter/quickjs/source/quickjs.cc | 68 +++++++++++++++++++++++
 2 files changed, 73 insertions(+)

diff --git a/src/interpreter/quickjs/include/cutils.h b/src/interpreter/quickjs/include/cutils.h
index 581544f..0714a1c 100644
--- a/src/interpreter/quickjs/include/cutils.h
+++ b/src/interpreter/quickjs/include/cutils.h
@@ -265,4 +265,9 @@ static inline int from_hex(int c) {
 void rqsort(void *base, size_t nmemb, size_t size,
             int (*cmp)(const void *, const void *, void *), void *arg);
 
+static inline BOOL is_surrogate(uint32_t c)
+{
+  return (c >> 11) == (0xD800 >> 11); // 0xD800-0xDFFF
+}
+
 #endif  // SRC_INTERPRETER_QUICKJS_INCLUDE_CUTILS_H_
diff --git a/src/interpreter/quickjs/source/quickjs.cc b/src/interpreter/quickjs/source/quickjs.cc
index e77d6aa..6343812 100644
--- a/src/interpreter/quickjs/source/quickjs.cc
+++ b/src/interpreter/quickjs/source/quickjs.cc
@@ -42569,6 +42569,73 @@ void *lre_realloc(void *opaque, void *ptr, size_t size) {
   return lepus_realloc_rt(ctx->rt, ptr, size);
 }
 
+static LEPUSValue js_regexp_escape(LEPUSContext *ctx, LEPUSValueConst this_val, int argc, LEPUSValueConst *argv)
+{
+  LEPUSValue str;
+  StringBuffer b_s, *b = &b_s;
+  JSString *p;
+  uint32_t c, i;
+  char s[16];
+
+  if (!LEPUS_IsString(argv[0]))
+    return LEPUS_ThrowTypeError(ctx, "not a string");
+  str = LEPUS_ToString(ctx, argv[0]); /* must call it to linearlize ropes */
+  if (LEPUS_IsException(str))
+    return LEPUS_EXCEPTION;
+  p = LEPUS_VALUE_GET_STRING(str);
+  string_buffer_init2(ctx, b, 0, p->is_wide_char);
+  for (i = 0; i < p->len; i++)
+  {
+    c = string_get(p, i);
+    if (c < 33)
+    {
+      if (c >= 9 && c <= 13)
+      {
+        string_buffer_putc8(b, '\\');
+        string_buffer_putc8(b, "tnvfr"[c - 9]);
+      }
+      else
+      {
+        goto hex2;
+      }
+    }
+    else if (c < 128)
+    {
+      if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
+      {
+        if (i == 0)
+          goto hex2;
+      }
+      else if (strchr(",-=<>#&!%:;@~'`\"", c))
+      {
+        goto hex2;
+      }
+      else if (c != '_')
+      {
+        string_buffer_putc8(b, '\\');
+      }
+      string_buffer_putc8(b, c);
+    }
+    else if (c < 256)
+    {
+    hex2:
+      snprintf(s, sizeof(s), "\\x%02x", c);
+      string_buffer_puts8(b, s);
+    }
+    else if (is_surrogate(c) || lre_is_space(c))
+    {
+      snprintf(s, sizeof(s), "\\u%04x", c);
+      string_buffer_puts8(b, s);
+    }
+    else
+    {
+      string_buffer_putc16(b, c);
+    }
+  }
+  LEPUS_FreeValue(ctx, str);
+  return string_buffer_end(b);
+}
+
 #if defined(__WASI_SDK__) || defined(QJS_UNITTEST)
 QJS_STATIC void js_clear_regexp_caputre_property(LEPUSContext *ctx,
                                                  LEPUSValue constructor,
@@ -43513,6 +43580,7 @@ done:
 }
 
 static const LEPUSCFunctionListEntry js_regexp_funcs[] = {
+    LEPUS_CFUNC_DEF("escape", 1, js_regexp_escape ),
     LEPUS_CGETSET_DEF("[Symbol.species]", js_get_this, NULL),
     // LEPUS_CFUNC_DEF("__RegExpExec", 2, js_regexp___RegExpExec ),
     // LEPUS_CFUNC_DEF("__RegExpDelete", 2, js_regexp___RegExpDelete ),
-- 
2.48.1

