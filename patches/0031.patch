From bfc5d525f4ee85d6ca24ccc4815db357e85aeb22 Mon Sep 17 00:00:00 2001
From: andrew <1297077+andrewmd5@users.noreply.github.com>
Date: Sun, 13 Apr 2025 18:00:07 +0900
Subject: [PATCH] removed the 'use strip' extension

removed the JS_EVAL_FLAG_STRIP eval flag and replaced it with LEPUS_SetStripInfo() which has simpler semantics.
---
 .../quickjs/include/quickjs-inner.h           | 10 +-
 src/interpreter/quickjs/include/quickjs.h     |  8 +-
 src/interpreter/quickjs/source/quickjs.cc     | 93 +++++++++++++------
 3 files changed, 79 insertions(+), 32 deletions(-)

diff --git a/src/interpreter/quickjs/include/quickjs-inner.h b/src/interpreter/quickjs/include/quickjs-inner.h
index 645714c..348bc5f 100644
--- a/src/interpreter/quickjs/include/quickjs-inner.h
+++ b/src/interpreter/quickjs/include/quickjs-inner.h
@@ -367,6 +367,9 @@ struct LEPUSRuntime {
 
   BOOL can_block : 8; /* TRUE if Atomics.wait can block */
 
+  /* see LEPUS_SetStripInfo() */
+  uint8_t strip_flags;
+
   /* Shape hash table */
   int shape_hash_bits;
   int shape_hash_size;
@@ -473,7 +476,7 @@ struct LEPUSClass {
 };
 
 #define JS_MODE_STRICT (1 << 0)
-#define JS_MODE_STRIP (1 << 1)
+#define JS_MODE_RESERVED (1 << 1)
 #define JS_MODE_BIGINT (1 << 2)
 #define JS_MODE_MATH (1 << 3)
 
@@ -995,12 +998,13 @@ typedef struct LEPUSFunctionBytecode {
     /* debug info, move to separate structure to save memory? */
     JSAtom filename;
     int line_num;
-    int source_len;
+
     int pc2line_len;
 #ifdef ENABLE_QUICKJS_DEBUGGER
     int64_t column_num;
 #endif
     uint8_t *pc2line_buf;
+    int source_len;
     char *source;
     struct list_head link;
     // for cpu profiler to use.
@@ -2919,6 +2923,8 @@ typedef struct JSFunctionDef {
   // <Primjs end>
 
   /* pc2line table */
+  bool strip_debug : 1;  /* strip all debug info (implies strip_source = TRUE) */
+  bool strip_source : 1; /* strip only source code */
   JSAtom filename;
   int line_num;
 #ifdef ENABLE_QUICKJS_DEBUGGER
diff --git a/src/interpreter/quickjs/include/quickjs.h b/src/interpreter/quickjs/include/quickjs.h
index 62b1bc8..750d17b 100644
--- a/src/interpreter/quickjs/include/quickjs.h
+++ b/src/interpreter/quickjs/include/quickjs.h
@@ -647,7 +647,7 @@ static inline LEPUSValue __JS_NewFloat64(LEPUSContext *ctx, double d) {
 #define LEPUS_EVAL_TYPE_MASK (3 << 0)
 
 #define LEPUS_EVAL_FLAG_STRICT (1 << 3)       /* force 'strict' mode */
-#define LEPUS_EVAL_FLAG_STRIP (1 << 4)        /* force 'strip' mode */
+#define LEPUS_EVAL_FLAG_RESERVED (1 << 4)        /* reserved */
 #define LEPUS_EVAL_FLAG_COMPILE_ONLY (1 << 5) /* internal use */
 /* use for runtime.compileScript */
 #define LEPUS_DEBUGGER_NO_PERSIST_SCRIPT (1 << 6)
@@ -1319,6 +1319,12 @@ void LEPUS_SetInterruptHandler(LEPUSRuntime *rt, LEPUSInterruptHandler *cb,
 /* if can_block is TRUE, Atomics.wait() can be used */
 void LEPUS_SetCanBlock(LEPUSRuntime *rt, LEPUS_BOOL can_block);
 
+/* select which debug info is stripped from the compiled code */
+#define JS_STRIP_SOURCE (1 << 0) /* strip source code */
+#define JS_STRIP_DEBUG (1 << 1)  /* strip all debug info including source code */
+void LEPUS_SetStripInfo(LEPUSRuntime *rt, int flags);
+int LEPUS_GetStripInfo(LEPUSRuntime *rt);
+
 typedef struct LEPUSModuleDef LEPUSModuleDef;
 
 /* return the module specifier (allocated with lepus_malloc()) or NULL if
diff --git a/src/interpreter/quickjs/source/quickjs.cc b/src/interpreter/quickjs/source/quickjs.cc
index de69399..88e1eb9 100644
--- a/src/interpreter/quickjs/source/quickjs.cc
+++ b/src/interpreter/quickjs/source/quickjs.cc
@@ -1301,6 +1301,12 @@ void LEPUS_SetCanBlock(LEPUSRuntime *rt, BOOL can_block) {
   rt->can_block = can_block;
 }
 
+void LEPUS_SetStripInfo(LEPUSRuntime *rt, int flags) {
+  rt->strip_flags = flags;
+}
+
+int LEPUS_GetStripInfo(LEPUSRuntime *rt) { return rt->strip_flags; }
+
 /* return 0 if OK, < 0 if exception */
 int LEPUS_EnqueueJob(LEPUSContext *ctx, LEPUSJobFunc *job_func, int argc,
                      LEPUSValueConst *argv) {
@@ -22927,7 +22933,7 @@ __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
   put_u32(fd->byte_code.buf + ctor_cpool_offset, ctor_fd->parent_cpool_idx);
 
   /* store the class source code in the constructor. */
-  if (!(fd->js_mode & JS_MODE_STRIP)) {
+  if (!fd->strip_source) {
     system_free(ctor_fd->source);
     auto offset = ctor_fd->src_start - (const char *)class_start_ptr;
     for (uint32_t i = 0, size = ctor_fd->caller_count; i < size; ++i) {
@@ -27921,6 +27927,8 @@ QJS_STATIC JSFunctionDef *js_new_function_def(LEPUSContext *ctx,
     fd->js_mode = parent->js_mode;
     fd->parent_scope_level = parent->scope_level;
   }
+  fd->strip_debug = ((ctx->rt->strip_flags & JS_STRIP_DEBUG) != 0);
+  fd->strip_source = ((ctx->rt->strip_flags & (JS_STRIP_DEBUG | JS_STRIP_SOURCE)) != 0);
 
   fd->is_eval = is_eval;
   fd->is_func_expr = is_func_expr;
@@ -30342,7 +30350,8 @@ QJS_STATIC void add_pc2line_info(
 }
 
 QJS_STATIC void compute_pc2line_info(JSFunctionDef *s) {
-  if (!(s->js_mode & JS_MODE_STRIP) && s->line_number_slots) {
+  if (!s->strip_debug && s->line_number_slots)
+  {
     // <Primjs begin>
     int64_t last_line_num = s->line_num;
     // <Primjs end>
@@ -30651,7 +30660,8 @@ __exception int resolve_labels(LEPUSContext *ctx, JSFunctionDef *s) {
   }
 #endif
   /* XXX: Should skip this phase if not generating SHORT_OPCODES */
-  if (s->line_number_size && !(s->js_mode & JS_MODE_STRIP)) {
+  if (s->line_number_size && !s->strip_debug)
+  {
     s->line_number_slots = static_cast<LineNumberSlot *>(lepus_mallocz(
         s->ctx, sizeof(*s->line_number_slots) * s->line_number_size,
         ALLOC_TAG_WITHOUT_PTR));
@@ -31869,7 +31879,8 @@ LEPUSValue js_create_function(LEPUSContext *ctx, JSFunctionDef *fd) {
   }
 
 #if defined(DUMP_BYTECODE) && (DUMP_BYTECODE & 4)
-  if (!(fd->js_mode & JS_MODE_STRIP)) {
+  if (!fd->strip_debug)
+  {
     printf("pass 1\n");
     dump_byte_code(ctx, 1, fd->byte_code.buf, fd->byte_code.size, fd->args,
                    fd->arg_count, fd->vars, fd->var_count, fd->closure_var,
@@ -31882,7 +31893,8 @@ LEPUSValue js_create_function(LEPUSContext *ctx, JSFunctionDef *fd) {
   if (resolve_variables(ctx, fd)) goto fail;
 
 #if defined(DUMP_BYTECODE) && (DUMP_BYTECODE & 2)
-  if (!(fd->js_mode & JS_MODE_STRIP)) {
+  if (!fd->strip_debug)
+  {
     printf("pass 2\n");
     dump_byte_code(ctx, 2, fd->byte_code.buf, fd->byte_code.size, fd->args,
                    fd->arg_count, fd->vars, fd->var_count, fd->closure_var,
@@ -31896,15 +31908,19 @@ LEPUSValue js_create_function(LEPUSContext *ctx, JSFunctionDef *fd) {
 
   if (compute_stack_size(ctx, fd, &stack_size) < 0) goto fail;
 
-  if (fd->js_mode & JS_MODE_STRIP) {
+  if (fd->strip_debug)
+  {
     function_size = offsetof(LEPUSFunctionBytecode, debug);
-  } else {
+  }
+  else
+  {
     function_size = sizeof(*b);
   }
   cpool_offset = function_size;
   function_size += fd->cpool_count * sizeof(*fd->cpool);
   vardefs_offset = function_size;
-  if (!(fd->js_mode & JS_MODE_STRIP) || fd->has_eval_call) {
+  if (!fd->strip_debug || fd->has_eval_call)
+  {
     function_size += (fd->arg_count + fd->var_count) * sizeof(*b->vardefs);
   }
   closure_var_offset = function_size;
@@ -31938,7 +31954,8 @@ LEPUSValue js_create_function(LEPUSContext *ctx, JSFunctionDef *fd) {
 
   b->func_name = fd->func_name;
   if (fd->arg_count + fd->var_count > 0) {
-    if ((fd->js_mode & JS_MODE_STRIP) && !fd->has_eval_call) {
+    if (fd->strip_debug && !fd->has_eval_call)
+    {
       /* Strip variable definitions not needed at runtime */
       int i;
       if (is_gc) {
@@ -31957,7 +31974,9 @@ LEPUSValue js_create_function(LEPUSContext *ctx, JSFunctionDef *fd) {
           fd->closure_var[i].var_name = JS_ATOM_NULL;
         }
       }
-    } else {
+    }
+    else
+    {
       b->vardefs = (JSVarDef *)((uint8_t *)b + vardefs_offset);
       memcpy(b->vardefs, fd->args, fd->arg_count * sizeof(fd->args[0]));
       memcpy(b->vardefs + fd->arg_count, fd->vars,
@@ -31989,14 +32008,17 @@ LEPUSValue js_create_function(LEPUSContext *ctx, JSFunctionDef *fd) {
 #endif
 #endif
 
-  if (fd->js_mode & JS_MODE_STRIP) {
+  if (fd->strip_debug)
+  {
     if (!is_gc) {
       LEPUS_FreeAtom(ctx, fd->filename);
       dbuf_free(&fd->pc2line);  // probably useless
       if (fd->caller_slots)
         free_caller_slot(ctx->rt, fd->caller_slots, fd->caller_count);
     }
-  } else {
+  }
+  else
+  {
     /* XXX: source and pc2line info should be packed at the end of the
        LEPUSFunctionBytecode structure, avoiding allocation overhead
      */
@@ -32054,7 +32076,8 @@ LEPUSValue js_create_function(LEPUSContext *ctx, JSFunctionDef *fd) {
   b->arguments_allowed = fd->arguments_allowed;
 
 #if defined(DUMP_BYTECODE) && (DUMP_BYTECODE & 1)
-  if (!(fd->js_mode & JS_MODE_STRIP)) {
+  if (!fd->strip_debug)
+  {
     js_dump_function_bytecode(ctx, b);
   }
 #endif
@@ -32224,11 +32247,7 @@ __exception int js_parse_directives(JSParseState *s) {
       s->cur_func->has_use_strict = TRUE;
       s->cur_func->js_mode |= JS_MODE_STRICT;
     }
-#if !defined(DUMP_BYTECODE) || !(DUMP_BYTECODE & 8)
-    else if (!strcmp(str, "use strip")) {
-      s->cur_func->js_mode |= JS_MODE_STRIP;
-    }
-#endif
+
 #ifdef CONFIG_BIGNUM
     else if (!strcmp(str, "use bigint")) {
       s->cur_func->js_mode |= JS_MODE_BIGINT;
@@ -32707,7 +32726,8 @@ QJS_STATIC __exception int js_parse_function_decl2(
       else
         emit_op(s, OP_return);
 
-      if (!(fd->js_mode & JS_MODE_STRIP)) {
+      if (!fd->strip_source)
+      {
         /* save the function source code */
         /* the end of the function source code is after the last
            token of the function source stored into s->last_ptr */
@@ -32729,7 +32749,8 @@ QJS_STATIC __exception int js_parse_function_decl2(
   while (s->token.val != '}') {
     if (js_parse_source_element(s)) goto fail;
   }
-  if (!(fd->js_mode & JS_MODE_STRIP)) {
+  if (!fd->strip_source)
+  {
     /* save the function source code */
     fd->source_len = s->buf_ptr - ptr;
     fd->source = js_strmalloc((const char *)ptr, fd->source_len);
@@ -33028,7 +33049,6 @@ QJS_STATIC LEPUSValue __JS_EvalInternal(LEPUSContext *ctx,
     var_refs = NULL;
     js_mode = 0;
     if (flags & LEPUS_EVAL_FLAG_STRICT) js_mode |= JS_MODE_STRICT;
-    if (flags & LEPUS_EVAL_FLAG_STRIP) js_mode |= JS_MODE_STRIP;
     if (eval_type == LEPUS_EVAL_TYPE_MODULE) {
       JSAtom module_name = LEPUS_NewAtom(ctx, filename);
       if (module_name == JS_ATOM_NULL) return LEPUS_EXCEPTION;
@@ -33783,6 +33803,15 @@ static int JS_WriteFunction(BCWriterState *s, LEPUSValueConst obj) {
       bc_put_leb128(s, b->debug.line_num);
       bc_put_leb128(s, b->debug.pc2line_len);
       dbuf_put(&s->dbuf, b->debug.pc2line_buf, b->debug.pc2line_len);
+      if (b->debug.source)
+      {
+        bc_put_leb128(s, b->debug.source_len);
+        dbuf_put(&s->dbuf, (uint8_t *)b->debug.source, b->debug.source_len);
+      }
+      else
+      {
+        bc_put_leb128(s, 0);
+      }
     }
   }
 
@@ -34545,6 +34574,9 @@ QJS_STATIC LEPUSValue JS_ReadFunction(BCReaderState *s) {
     bc_read_trace(s, "debug {\n");
     if (bc_get_atom(s, &b->debug.filename)) goto fail;
     if (bc_get_leb128_int(s, &b->debug.line_num)) goto fail;
+#ifdef DUMP_READ_OBJECT
+        bc_read_trace(s, "filename: "); print_atom(s->ctx, b->debug.filename); printf(" line: %d\n", b->debug.line_num);
+#endif
 
     if (ctx->debuginfo_outside == 1) {
       if (!(ctx->binary_version & NEW_DEBUGINFO_FLAG)) {
@@ -34576,15 +34608,18 @@ QJS_STATIC LEPUSValue JS_ReadFunction(BCReaderState *s) {
       if (!b->debug.pc2line_buf) goto fail;
       if (bc_get_buf(s, b->debug.pc2line_buf, b->debug.pc2line_len)) goto fail;
     }
-#ifdef ENABLE_QUICKJS_DEBUGGER
-    b->debug.file_name = ctx->rt->atom_array[b->debug.filename];
-#endif
+    if (bc_get_leb128_int(s, &b->debug.source_len))
+      goto fail;
+    if (b->debug.source_len)
+    {
+      bc_read_trace(s, "source: %d bytes\n", b->source_len);
+      b->debug.source = static_cast<char *>(lepus_mallocz(ctx, b->debug.source_len));
+      if (!b->debug.source)
+        goto fail;
+      if (bc_get_buf(s, (uint8_t *)b->debug.source, b->debug.source_len))
+        goto fail;
+    }
 
-#ifdef DUMP_READ_OBJECT
-    bc_read_trace(s, "filename: ");
-    print_atom(s->ctx, b->debug.filename);
-    printf("\n");
-#endif
     bc_read_trace(s, "}\n");
   }
   if (b->cpool_count != 0) {
-- 
2.39.5 (Apple Git-154)

