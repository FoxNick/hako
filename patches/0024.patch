From 2a463449c7e27d5b630da432c1b076c703016b4c Mon Sep 17 00:00:00 2001
From: andrew <1297077+andrewmd5@users.noreply.github.com>
Date: Tue, 8 Apr 2025 13:36:13 +0900
Subject: [PATCH] added Array.prototype.findLast{Index} and
 TypeArray.prototype.findLast{index}

---
 src/interpreter/quickjs/source/quickjs.cc | 121 ++++++++++++++++------
 1 file changed, 91 insertions(+), 30 deletions(-)

diff --git a/src/interpreter/quickjs/source/quickjs.cc b/src/interpreter/quickjs/source/quickjs.cc
index 2dc8696..a16a083 100644
--- a/src/interpreter/quickjs/source/quickjs.cc
+++ b/src/interpreter/quickjs/source/quickjs.cc
@@ -38048,41 +38048,72 @@ exception:
   return LEPUS_EXCEPTION;
 }
 
+enum
+{
+  ArrayFind,
+  ArrayFindIndex,
+  ArrayFindLast,
+  ArrayFindLastIndex,
+};
+
 QJS_STATIC LEPUSValue js_array_find(LEPUSContext *ctx, LEPUSValueConst this_val,
-                                    int argc, LEPUSValueConst *argv,
-                                    int findIndex) {
+                             int argc, LEPUSValueConst *argv, int mode)
+{
   LEPUSValueConst func, this_arg;
   LEPUSValueConst args[3];
   LEPUSValue obj, val, index_val, res;
-  int64_t len, k;
+  int64_t len, k, end;
+  int dir;
 
   index_val = LEPUS_UNDEFINED;
   val = LEPUS_UNDEFINED;
   obj = LEPUS_ToObject(ctx, this_val);
-  if (js_get_length64(ctx, &len, obj)) goto exception;
+  if (js_get_length64(ctx, &len, obj))
+    goto exception;
 
   func = argv[0];
-  if (check_function(ctx, func)) goto exception;
+  if (check_function(ctx, func))
+    goto exception;
 
   this_arg = LEPUS_UNDEFINED;
-  if (argc > 1) this_arg = argv[1];
+  if (argc > 1)
+    this_arg = argv[1];
 
-  for (k = 0; k < len; k++) {
+  k = 0;
+  dir = 1;
+  end = len;
+  if (mode == ArrayFindLast || mode == ArrayFindLastIndex)
+  {
+    k = len - 1;
+    dir = -1;
+    end = -1;
+  }
+
+  // TODO add fast path for fast arrays
+  for (; k != end; k += dir)
+  {
     index_val = LEPUS_NewInt64(ctx, k);
-    if (LEPUS_IsException(index_val)) goto exception;
+    if (LEPUS_IsException(index_val))
+      goto exception;
     val = JS_GetPropertyValue(ctx, obj, index_val);
-    if (LEPUS_IsException(val)) goto exception;
+    if (LEPUS_IsException(val))
+      goto exception;
     args[0] = val;
     args[1] = index_val;
     args[2] = this_val;
     res = JS_Call_RC(ctx, func, this_arg, 3, args);
-    if (LEPUS_IsException(res)) goto exception;
-    if (JS_ToBoolFree_RC(ctx, res)) {
-      if (findIndex) {
+    if (LEPUS_IsException(res))
+      goto exception;
+    if (JS_ToBoolFree_RC(ctx, res))
+    {
+      if (mode == ArrayFindIndex || mode == ArrayFindLastIndex)
+      {
         LEPUS_FreeValue(ctx, val);
         LEPUS_FreeValue(ctx, obj);
         return index_val;
-      } else {
+      }
+      else
+      {
         LEPUS_FreeValue(ctx, index_val);
         LEPUS_FreeValue(ctx, obj);
         return val;
@@ -38092,7 +38123,7 @@ QJS_STATIC LEPUSValue js_array_find(LEPUSContext *ctx, LEPUSValueConst this_val,
     LEPUS_FreeValue(ctx, index_val);
   }
   LEPUS_FreeValue(ctx, obj);
-  if (findIndex)
+  if (mode == ArrayFindIndex || mode == ArrayFindLastIndex)
     return LEPUS_NewInt32(ctx, -1);
   else
     return LEPUS_UNDEFINED;
@@ -38872,8 +38903,10 @@ static const LEPUSCFunctionListEntry js_array_proto_funcs[] = {
     LEPUS_CFUNC_MAGIC_DEF("reduceRight", 1, js_array_reduce,
                           special_reduceRight),
     LEPUS_CFUNC_DEF("fill", 1, js_array_fill),
-    LEPUS_CFUNC_MAGIC_DEF("find", 1, js_array_find, 0),
-    LEPUS_CFUNC_MAGIC_DEF("findIndex", 1, js_array_find, 1),
+    LEPUS_CFUNC_MAGIC_DEF("find", 1, js_array_find, ArrayFind),
+    LEPUS_CFUNC_MAGIC_DEF("findIndex", 1, js_array_find, ArrayFindIndex),
+    LEPUS_CFUNC_MAGIC_DEF("findLast", 1, js_array_find, ArrayFindLast),
+    LEPUS_CFUNC_MAGIC_DEF("findLastIndex", 1, js_array_find, ArrayFindLastIndex),
     LEPUS_CFUNC_DEF("indexOf", 1, js_array_indexOf),
     LEPUS_CFUNC_DEF("lastIndexOf", 1, js_array_lastIndexOf),
     LEPUS_CFUNC_DEF("includes", 1, js_array_includes),
@@ -52582,6 +52615,10 @@ void LEPUS_AddIntrinsicBaseObjects(LEPUSContext *ctx) {
         "\0"
         "findIndex"
         "\0"
+        "findLast" 
+        "\0"
+        "findLastIndex"
+        "\0"
         "flat"
         "\0"
         "flatMap"
@@ -53624,42 +53661,64 @@ QJS_STATIC LEPUSValue js_typed_array_fill(LEPUSContext *ctx,
 QJS_STATIC LEPUSValue js_typed_array_find(LEPUSContext *ctx,
                                           LEPUSValueConst this_val, int argc,
                                           LEPUSValueConst *argv,
-                                          int findIndex) {
+                                          int mode)
+{
   LEPUSValueConst func, this_arg;
   LEPUSValueConst args[3];
   LEPUSValue val, index_val, res;
-  int len, k;
+  int len, k, end;
+  int dir;
 
   val = LEPUS_UNDEFINED;
   len = js_typed_array_get_length_internal(ctx, this_val);
-  if (len < 0) goto exception;
+  if (len < 0)
+    goto exception;
 
   func = argv[0];
-  if (check_function(ctx, func)) goto exception;
+  if (check_function(ctx, func))
+    goto exception;
 
   this_arg = LEPUS_UNDEFINED;
-  if (argc > 1) this_arg = argv[1];
+  if (argc > 1)
+    this_arg = argv[1];
 
-  for (k = 0; k < len; k++) {
+  k = 0;
+  dir = 1;
+  end = len;
+  if (mode == ArrayFindLast || mode == ArrayFindLastIndex)
+  {
+    k = len - 1;
+    dir = -1;
+    end = -1;
+  }
+
+  for (; k != end; k += dir)
+  {
     index_val = LEPUS_NewInt32(ctx, k);
     val = JS_GetPropertyValue(ctx, this_val, index_val);
-    if (LEPUS_IsException(val)) goto exception;
+    if (LEPUS_IsException(val))
+      goto exception;
     args[0] = val;
     args[1] = index_val;
     args[2] = this_val;
     res = JS_Call_RC(ctx, func, this_arg, 3, args);
-    if (LEPUS_IsException(res)) goto exception;
-    if (JS_ToBoolFree_RC(ctx, res)) {
-      if (findIndex) {
+    if (LEPUS_IsException(res))
+      goto exception;
+    if (JS_ToBoolFree_RC(ctx, res))
+    {
+      if (mode == ArrayFindIndex || mode == ArrayFindLastIndex)
+      {
         LEPUS_FreeValue(ctx, val);
         return index_val;
-      } else {
+      }
+      else
+      {
         return val;
       }
     }
     LEPUS_FreeValue(ctx, val);
   }
-  if (findIndex)
+  if (mode == ArrayFindIndex || mode == ArrayFindLastIndex)
     return LEPUS_NewInt32(ctx, -1);
   else
     return LEPUS_UNDEFINED;
@@ -54425,8 +54484,10 @@ static const LEPUSCFunctionListEntry js_typed_array_base_proto_funcs[] = {
     LEPUS_CFUNC_MAGIC_DEF("reduceRight", 1, js_array_reduce,
                           special_reduceRight | special_TA),
     LEPUS_CFUNC_DEF("fill", 1, js_typed_array_fill),
-    LEPUS_CFUNC_MAGIC_DEF("find", 1, js_typed_array_find, 0),
-    LEPUS_CFUNC_MAGIC_DEF("findIndex", 1, js_typed_array_find, 1),
+    LEPUS_CFUNC_MAGIC_DEF("find", 1, js_typed_array_find, ArrayFind),
+    LEPUS_CFUNC_MAGIC_DEF("findIndex", 1, js_typed_array_find, ArrayFindIndex),
+    LEPUS_CFUNC_MAGIC_DEF("findLast", 1, js_typed_array_find, ArrayFindLast),
+    LEPUS_CFUNC_MAGIC_DEF("findLastIndex", 1, js_typed_array_find, ArrayFindLastIndex),
     LEPUS_CFUNC_DEF("reverse", 0, js_typed_array_reverse),
     LEPUS_CFUNC_DEF("slice", 2, js_typed_array_slice),
     LEPUS_CFUNC_DEF("subarray", 2, js_typed_array_subarray),
-- 
2.39.5 (Apple Git-154)

