From 8c0e32e040139df25e4af9560471b6ae62929f06 Mon Sep 17 00:00:00 2001
From: andrew <1297077+andrewmd5@users.noreply.github.com>
Date: Tue, 24 Jun 2025 16:01:57 +0900
Subject: [PATCH] Object.prototype has an immutable prototype

---
 .../quickjs/include/quickjs-inner.h           |  3 ++-
 src/interpreter/quickjs/source/quickjs.cc     | 26 ++++++++++++++++++-
 2 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/src/interpreter/quickjs/include/quickjs-inner.h b/src/interpreter/quickjs/include/quickjs-inner.h
index 8afee9c..c1c428c 100644
--- a/src/interpreter/quickjs/include/quickjs-inner.h
+++ b/src/interpreter/quickjs/include/quickjs-inner.h
@@ -1280,7 +1280,8 @@ struct LEPUSObject {
   uint8_t is_exotic : 1;      /* TRUE if object has exotic property handlers */
   uint8_t fast_array : 1;     /* TRUE if u.array is used for get/put */
   uint8_t is_constructor : 1; /* TRUE if object is a constructor function */
-  uint8_t is_uncatchable_error : 1; /* if TRUE, error is not catchable */
+  uint8_t has_immutable_prototype : 1; /* cannot modify the prototype */
+  uint8_t is_uncatchable_error : 1;    /* if TRUE, error is not catchable */
   uint8_t is_class : 1;             /* TRUE if object is a class constructor */
   uint8_t tmp_mark : 1;             /* used in JS_WriteObjectRec() */
   uint16_t class_id;                /* see JS_CLASS_x */
diff --git a/src/interpreter/quickjs/source/quickjs.cc b/src/interpreter/quickjs/source/quickjs.cc
index 38740b9..e77d6aa 100644
--- a/src/interpreter/quickjs/source/quickjs.cc
+++ b/src/interpreter/quickjs/source/quickjs.cc
@@ -4658,6 +4658,7 @@ QJS_HIDE LEPUSValue JS_NewObjectFromShape(LEPUSContext *ctx, JSShape *sh,
   p->is_exotic = 0;
   p->fast_array = 0;
   p->is_constructor = 0;
+  p->has_immutable_prototype = 0;
   p->is_uncatchable_error = 0;
   p->is_class = 0;
   p->tmp_mark = 0;
@@ -7360,6 +7361,15 @@ LEPUSValue JS_ThrowTypeErrorNotFunction(LEPUSContext *ctx) {
   return ret;
 }
 
+QJS_STATIC void JS_SetImmutablePrototype(LEPUSContext *ctx, LEPUSValueConst obj)
+{
+  LEPUSObject *p;
+    if (LEPUS_VALUE_GET_TAG(obj) != LEPUS_TAG_OBJECT)
+        return;
+    p = LEPUS_VALUE_GET_OBJ(obj);
+    p->has_immutable_prototype = TRUE;
+}
+
 /* return -1 (exception) or TRUE/FALSE */
 int JS_SetPrototypeInternal(LEPUSContext *ctx, LEPUSValueConst obj,
                             LEPUSValueConst proto_val, BOOL throw_flag) {
@@ -7390,7 +7400,20 @@ int JS_SetPrototypeInternal(LEPUSContext *ctx, LEPUSValueConst obj,
     return js_proxy_setPrototypeOf(ctx, obj, proto_val, throw_flag);
   sh = p->shape;
   if (sh->proto == proto) return TRUE;
-  if (!p->extensible) {
+  if (unlikely(p->has_immutable_prototype))
+  {
+    if (throw_flag)
+    {
+      LEPUS_ThrowTypeError(ctx, "prototype is immutable");
+      return -1;
+    }
+    else
+    {
+      return FALSE;
+    }
+  }
+  if (unlikely(!p->extensible))
+  {
     if (throw_flag) {
       LEPUS_ThrowTypeError(ctx, "object is not extensible");
       return -1;
@@ -52889,6 +52912,7 @@ QJS_STATIC void JS_AddIntrinsicBasicObjects(LEPUSContext *ctx) {
   int i;
 
   ctx->class_proto[JS_CLASS_OBJECT] = LEPUS_NewObjectProto(ctx, LEPUS_NULL);
+  JS_SetImmutablePrototype(ctx, ctx->class_proto[JS_CLASS_OBJECT]);
   ctx->function_proto =
       JS_NewCFunction3(ctx, js_function_proto, "", 0, LEPUS_CFUNC_generic, 0,
                        ctx->class_proto[JS_CLASS_OBJECT]);
-- 
2.48.1

